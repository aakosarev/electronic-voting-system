syntax = "proto3";

option go_package = "github.com/aakosarev/electronic-voting-system/contracts/gen/go/electronic-voting-manager/v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message Voting {
  int32 votingID = 1;
  string votingTitle = 2;
  int64 endTime = 3;
  string address = 4;
  google.protobuf.Timestamp createdOn = 5;
}

message VotingAvailableToUserID {
  int32 userID = 1;
  int32 votingID = 2;
  google.protobuf.Timestamp createdOn = 3;
  string votingTitle = 4;
  string votingAddress = 5;
}

message CreateVotingRequest {
  string votingTitle = 1;
  repeated string votingOptions = 2;
  google.protobuf.Timestamp endTime = 3;
}

message CreateVotingResponse {
  int32 votingID = 1;
}

message GetAllVotingsResponse {
  repeated Voting votings = 1;
}

message AddRightToVoteRequest {
  int32 userID = 1;
  int32 votingID = 2;
}

message GetVotingsAvailableToUserIDRequest{
  int32 userID = 1;
}

message GetVotingsAvailableToUserIDResponse{
  repeated VotingAvailableToUserID votingsAvailableToUserID = 1;
}

message RegisterAddressToVotingRequest {
  int32 votingID = 1;
  string address = 2;
}

message GetVotingInformationRequest {
  int32 votingID = 1;
}

message Option {
  string name = 1;
  int64 numberVotes = 2;
}

message GetVotingInformationResponse {
  string title = 1;
  int64 numberRegisteredVoters = 2;
  google.protobuf.Timestamp endTime = 3;
  map <int64, Option> options = 4;
}

service VotingManager {
  rpc CreateVoting(CreateVotingRequest) returns (CreateVotingResponse);
  rpc GetAllVotings(google.protobuf.Empty) returns (GetAllVotingsResponse);
  rpc AddRightToVote(AddRightToVoteRequest) returns (google.protobuf.Empty);
  rpc GetVotingsAvailableToUserID(GetVotingsAvailableToUserIDRequest) returns (GetVotingsAvailableToUserIDResponse);
  rpc RegisterAddressToVoting(RegisterAddressToVotingRequest) returns (google.protobuf.Empty);
  rpc GetVotingInformation(GetVotingInformationRequest) returns (GetVotingInformationResponse);
}