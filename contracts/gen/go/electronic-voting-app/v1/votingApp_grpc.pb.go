// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: votingApp.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotingAppClient is the client API for VotingApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingAppClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type votingAppClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingAppClient(cc grpc.ClientConnInterface) VotingAppClient {
	return &votingAppClient{cc}
}

func (c *votingAppClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/VotingApp/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingAppServer is the server API for VotingApp service.
// All implementations must embed UnimplementedVotingAppServer
// for forward compatibility
type VotingAppServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedVotingAppServer()
}

// UnimplementedVotingAppServer must be embedded to have forward compatible implementations.
type UnimplementedVotingAppServer struct {
}

func (UnimplementedVotingAppServer) RegisterUser(context.Context, *RegisterUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedVotingAppServer) mustEmbedUnimplementedVotingAppServer() {}

// UnsafeVotingAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingAppServer will
// result in compilation errors.
type UnsafeVotingAppServer interface {
	mustEmbedUnimplementedVotingAppServer()
}

func RegisterVotingAppServer(s grpc.ServiceRegistrar, srv VotingAppServer) {
	s.RegisterService(&VotingApp_ServiceDesc, srv)
}

func _VotingApp_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingAppServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingApp/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingAppServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotingApp_ServiceDesc is the grpc.ServiceDesc for VotingApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotingApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VotingApp",
	HandlerType: (*VotingAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _VotingApp_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "votingApp.proto",
}
