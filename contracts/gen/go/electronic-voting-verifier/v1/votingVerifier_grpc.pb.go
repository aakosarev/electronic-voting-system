// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: votingVerifier.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotingVerifierClient is the client API for VotingVerifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingVerifierClient interface {
	GetPublicKeyForVotingID(ctx context.Context, in *GetPublicKeyForVotingIDRequest, opts ...grpc.CallOption) (*GetPublicKeyForVotingIDResponse, error)
	SignBlindedAddress(ctx context.Context, in *SignBlindedAddressRequest, opts ...grpc.CallOption) (*SignBlindedAddressResponse, error)
	RegisterAddress(ctx context.Context, in *RegisterAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GenerateRSAKeyPairForVotingID(ctx context.Context, in *GenerateRSAKeyPairForVotingIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRegistrationStatuses(ctx context.Context, in *GetRegistrationStatusesRequest, opts ...grpc.CallOption) (*GetRegistrationStatusesResponse, error)
}

type votingVerifierClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingVerifierClient(cc grpc.ClientConnInterface) VotingVerifierClient {
	return &votingVerifierClient{cc}
}

func (c *votingVerifierClient) GetPublicKeyForVotingID(ctx context.Context, in *GetPublicKeyForVotingIDRequest, opts ...grpc.CallOption) (*GetPublicKeyForVotingIDResponse, error) {
	out := new(GetPublicKeyForVotingIDResponse)
	err := c.cc.Invoke(ctx, "/VotingVerifier/GetPublicKeyForVotingID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingVerifierClient) SignBlindedAddress(ctx context.Context, in *SignBlindedAddressRequest, opts ...grpc.CallOption) (*SignBlindedAddressResponse, error) {
	out := new(SignBlindedAddressResponse)
	err := c.cc.Invoke(ctx, "/VotingVerifier/SignBlindedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingVerifierClient) RegisterAddress(ctx context.Context, in *RegisterAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/VotingVerifier/RegisterAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingVerifierClient) GenerateRSAKeyPairForVotingID(ctx context.Context, in *GenerateRSAKeyPairForVotingIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/VotingVerifier/GenerateRSAKeyPairForVotingID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingVerifierClient) GetRegistrationStatuses(ctx context.Context, in *GetRegistrationStatusesRequest, opts ...grpc.CallOption) (*GetRegistrationStatusesResponse, error) {
	out := new(GetRegistrationStatusesResponse)
	err := c.cc.Invoke(ctx, "/VotingVerifier/GetRegistrationStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingVerifierServer is the server API for VotingVerifier service.
// All implementations must embed UnimplementedVotingVerifierServer
// for forward compatibility
type VotingVerifierServer interface {
	GetPublicKeyForVotingID(context.Context, *GetPublicKeyForVotingIDRequest) (*GetPublicKeyForVotingIDResponse, error)
	SignBlindedAddress(context.Context, *SignBlindedAddressRequest) (*SignBlindedAddressResponse, error)
	RegisterAddress(context.Context, *RegisterAddressRequest) (*emptypb.Empty, error)
	GenerateRSAKeyPairForVotingID(context.Context, *GenerateRSAKeyPairForVotingIDRequest) (*emptypb.Empty, error)
	GetRegistrationStatuses(context.Context, *GetRegistrationStatusesRequest) (*GetRegistrationStatusesResponse, error)
	mustEmbedUnimplementedVotingVerifierServer()
}

// UnimplementedVotingVerifierServer must be embedded to have forward compatible implementations.
type UnimplementedVotingVerifierServer struct {
}

func (UnimplementedVotingVerifierServer) GetPublicKeyForVotingID(context.Context, *GetPublicKeyForVotingIDRequest) (*GetPublicKeyForVotingIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKeyForVotingID not implemented")
}
func (UnimplementedVotingVerifierServer) SignBlindedAddress(context.Context, *SignBlindedAddressRequest) (*SignBlindedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBlindedAddress not implemented")
}
func (UnimplementedVotingVerifierServer) RegisterAddress(context.Context, *RegisterAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAddress not implemented")
}
func (UnimplementedVotingVerifierServer) GenerateRSAKeyPairForVotingID(context.Context, *GenerateRSAKeyPairForVotingIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRSAKeyPairForVotingID not implemented")
}
func (UnimplementedVotingVerifierServer) GetRegistrationStatuses(context.Context, *GetRegistrationStatusesRequest) (*GetRegistrationStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistrationStatuses not implemented")
}
func (UnimplementedVotingVerifierServer) mustEmbedUnimplementedVotingVerifierServer() {}

// UnsafeVotingVerifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingVerifierServer will
// result in compilation errors.
type UnsafeVotingVerifierServer interface {
	mustEmbedUnimplementedVotingVerifierServer()
}

func RegisterVotingVerifierServer(s grpc.ServiceRegistrar, srv VotingVerifierServer) {
	s.RegisterService(&VotingVerifier_ServiceDesc, srv)
}

func _VotingVerifier_GetPublicKeyForVotingID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyForVotingIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingVerifierServer).GetPublicKeyForVotingID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingVerifier/GetPublicKeyForVotingID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingVerifierServer).GetPublicKeyForVotingID(ctx, req.(*GetPublicKeyForVotingIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingVerifier_SignBlindedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBlindedAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingVerifierServer).SignBlindedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingVerifier/SignBlindedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingVerifierServer).SignBlindedAddress(ctx, req.(*SignBlindedAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingVerifier_RegisterAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingVerifierServer).RegisterAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingVerifier/RegisterAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingVerifierServer).RegisterAddress(ctx, req.(*RegisterAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingVerifier_GenerateRSAKeyPairForVotingID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRSAKeyPairForVotingIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingVerifierServer).GenerateRSAKeyPairForVotingID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingVerifier/GenerateRSAKeyPairForVotingID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingVerifierServer).GenerateRSAKeyPairForVotingID(ctx, req.(*GenerateRSAKeyPairForVotingIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingVerifier_GetRegistrationStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingVerifierServer).GetRegistrationStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingVerifier/GetRegistrationStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingVerifierServer).GetRegistrationStatuses(ctx, req.(*GetRegistrationStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotingVerifier_ServiceDesc is the grpc.ServiceDesc for VotingVerifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotingVerifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VotingVerifier",
	HandlerType: (*VotingVerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKeyForVotingID",
			Handler:    _VotingVerifier_GetPublicKeyForVotingID_Handler,
		},
		{
			MethodName: "SignBlindedAddress",
			Handler:    _VotingVerifier_SignBlindedAddress_Handler,
		},
		{
			MethodName: "RegisterAddress",
			Handler:    _VotingVerifier_RegisterAddress_Handler,
		},
		{
			MethodName: "GenerateRSAKeyPairForVotingID",
			Handler:    _VotingVerifier_GenerateRSAKeyPairForVotingID_Handler,
		},
		{
			MethodName: "GetRegistrationStatuses",
			Handler:    _VotingVerifier_GetRegistrationStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "votingVerifier.proto",
}
