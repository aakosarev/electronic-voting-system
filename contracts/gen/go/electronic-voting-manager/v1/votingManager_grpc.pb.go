// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: votingManager.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotingManagerClient is the client API for VotingManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingManagerClient interface {
	CreateVoting(ctx context.Context, in *CreateVotingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllVotings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllVotingsResponse, error)
	AddRightToVote(ctx context.Context, in *AddRightToVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type votingManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingManagerClient(cc grpc.ClientConnInterface) VotingManagerClient {
	return &votingManagerClient{cc}
}

func (c *votingManagerClient) CreateVoting(ctx context.Context, in *CreateVotingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/VotingManager/CreateVoting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingManagerClient) GetAllVotings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllVotingsResponse, error) {
	out := new(GetAllVotingsResponse)
	err := c.cc.Invoke(ctx, "/VotingManager/GetAllVotings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingManagerClient) AddRightToVote(ctx context.Context, in *AddRightToVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/VotingManager/AddRightToVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingManagerServer is the server API for VotingManager service.
// All implementations must embed UnimplementedVotingManagerServer
// for forward compatibility
type VotingManagerServer interface {
	CreateVoting(context.Context, *CreateVotingRequest) (*emptypb.Empty, error)
	GetAllVotings(context.Context, *emptypb.Empty) (*GetAllVotingsResponse, error)
	AddRightToVote(context.Context, *AddRightToVoteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedVotingManagerServer()
}

// UnimplementedVotingManagerServer must be embedded to have forward compatible implementations.
type UnimplementedVotingManagerServer struct {
}

func (UnimplementedVotingManagerServer) CreateVoting(context.Context, *CreateVotingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoting not implemented")
}
func (UnimplementedVotingManagerServer) GetAllVotings(context.Context, *emptypb.Empty) (*GetAllVotingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVotings not implemented")
}
func (UnimplementedVotingManagerServer) AddRightToVote(context.Context, *AddRightToVoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRightToVote not implemented")
}
func (UnimplementedVotingManagerServer) mustEmbedUnimplementedVotingManagerServer() {}

// UnsafeVotingManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingManagerServer will
// result in compilation errors.
type UnsafeVotingManagerServer interface {
	mustEmbedUnimplementedVotingManagerServer()
}

func RegisterVotingManagerServer(s grpc.ServiceRegistrar, srv VotingManagerServer) {
	s.RegisterService(&VotingManager_ServiceDesc, srv)
}

func _VotingManager_CreateVoting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVotingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingManagerServer).CreateVoting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingManager/CreateVoting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingManagerServer).CreateVoting(ctx, req.(*CreateVotingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingManager_GetAllVotings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingManagerServer).GetAllVotings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingManager/GetAllVotings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingManagerServer).GetAllVotings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingManager_AddRightToVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRightToVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingManagerServer).AddRightToVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingManager/AddRightToVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingManagerServer).AddRightToVote(ctx, req.(*AddRightToVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotingManager_ServiceDesc is the grpc.ServiceDesc for VotingManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotingManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VotingManager",
	HandlerType: (*VotingManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVoting",
			Handler:    _VotingManager_CreateVoting_Handler,
		},
		{
			MethodName: "GetAllVotings",
			Handler:    _VotingManager_GetAllVotings_Handler,
		},
		{
			MethodName: "AddRightToVote",
			Handler:    _VotingManager_AddRightToVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "votingManager.proto",
}
